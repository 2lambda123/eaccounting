/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Voucher,
    VoucherFromJSON,
    VoucherFromJSONTyped,
    VoucherToJSON,
} from './';

/**
 * 
 * @export
 * @interface CustomerLedgerItemWithVoucher
 */
export interface CustomerLedgerItemWithVoucher {
    /**
     * Max length: 3 characters
     * @type {string}
     * @memberof CustomerLedgerItemWithVoucher
     */
    currencyCode: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerLedgerItemWithVoucher
     */
    currencyRate?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomerLedgerItemWithVoucher
     */
    currencyRateUnit?: number;
    /**
     * Source: Get from /v1/customerlistitems.
     * @type {string}
     * @memberof CustomerLedgerItemWithVoucher
     */
    customerId: string;
    /**
     * Format: YYYY-MM-DD
     * @type {Date}
     * @memberof CustomerLedgerItemWithVoucher
     */
    dueDate: Date;
    /**
     * Purpose: Unique Id provided by eAccounting
     * @type {string}
     * @memberof CustomerLedgerItemWithVoucher
     */
    readonly id?: string;
    /**
     * Format: YYYY-MM-DD
     * @type {Date}
     * @memberof CustomerLedgerItemWithVoucher
     */
    invoiceDate: Date;
    /**
     * 
     * @type {number}
     * @memberof CustomerLedgerItemWithVoucher
     */
    invoiceNumber: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerLedgerItemWithVoucher
     */
    isCreditInvoice: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerLedgerItemWithVoucher
     */
    paymentReferenceNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerLedgerItemWithVoucher
     */
    remainingAmountInvoiceCurrency: number;
    /**
     * 
     * @type {number}
     * @memberof CustomerLedgerItemWithVoucher
     */
    roundingsAmountInvoiceCurrency: number;
    /**
     * 
     * @type {number}
     * @memberof CustomerLedgerItemWithVoucher
     */
    totalAmountInvoiceCurrency: number;
    /**
     * 
     * @type {number}
     * @memberof CustomerLedgerItemWithVoucher
     */
    vATAmountInvoiceCurrency: number;
    /**
     * 
     * @type {Voucher}
     * @memberof CustomerLedgerItemWithVoucher
     */
    voucher: Voucher;
    /**
     * 
     * @type {Date}
     * @memberof CustomerLedgerItemWithVoucher
     */
    modifiedUtc?: Date;
}

export function CustomerLedgerItemWithVoucherFromJSON(json: any): CustomerLedgerItemWithVoucher {
    return CustomerLedgerItemWithVoucherFromJSONTyped(json, false);
}

export function CustomerLedgerItemWithVoucherFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerLedgerItemWithVoucher {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currencyCode': json['CurrencyCode'],
        'currencyRate': !exists(json, 'CurrencyRate') ? undefined : json['CurrencyRate'],
        'currencyRateUnit': !exists(json, 'CurrencyRateUnit') ? undefined : json['CurrencyRateUnit'],
        'customerId': json['CustomerId'],
        'dueDate': (new Date(json['DueDate'])),
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'invoiceDate': (new Date(json['InvoiceDate'])),
        'invoiceNumber': json['InvoiceNumber'],
        'isCreditInvoice': json['IsCreditInvoice'],
        'paymentReferenceNumber': !exists(json, 'PaymentReferenceNumber') ? undefined : json['PaymentReferenceNumber'],
        'remainingAmountInvoiceCurrency': json['RemainingAmountInvoiceCurrency'],
        'roundingsAmountInvoiceCurrency': json['RoundingsAmountInvoiceCurrency'],
        'totalAmountInvoiceCurrency': json['TotalAmountInvoiceCurrency'],
        'vATAmountInvoiceCurrency': json['VATAmountInvoiceCurrency'],
        'voucher': VoucherFromJSON(json['Voucher']),
        'modifiedUtc': !exists(json, 'ModifiedUtc') ? undefined : (new Date(json['ModifiedUtc'])),
    };
}

export function CustomerLedgerItemWithVoucherToJSON(value?: CustomerLedgerItemWithVoucher | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'CurrencyCode': value.currencyCode,
        'CurrencyRate': value.currencyRate,
        'CurrencyRateUnit': value.currencyRateUnit,
        'CustomerId': value.customerId,
        'DueDate': (value.dueDate.toISOString()),
        'InvoiceDate': (value.invoiceDate.toISOString()),
        'InvoiceNumber': value.invoiceNumber,
        'IsCreditInvoice': value.isCreditInvoice,
        'PaymentReferenceNumber': value.paymentReferenceNumber,
        'RemainingAmountInvoiceCurrency': value.remainingAmountInvoiceCurrency,
        'RoundingsAmountInvoiceCurrency': value.roundingsAmountInvoiceCurrency,
        'TotalAmountInvoiceCurrency': value.totalAmountInvoiceCurrency,
        'VATAmountInvoiceCurrency': value.vATAmountInvoiceCurrency,
        'Voucher': VoucherToJSON(value.voucher),
        'ModifiedUtc': value.modifiedUtc === undefined ? undefined : (value.modifiedUtc.toISOString()),
    };
}


