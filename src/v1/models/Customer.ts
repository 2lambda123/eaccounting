/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TermsOfPayment,
    TermsOfPaymentFromJSON,
    TermsOfPaymentFromJSONTyped,
    TermsOfPaymentToJSON,
} from './';

/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * Purpose: Unique Id provided by eAccounting
     * @type {string}
     * @memberof Customer
     */
    readonly id?: string;
    /**
     * Purpose: Unique identifier. If not provided, eAccounting will provide one
     * @type {string}
     * @memberof Customer
     */
    customerNumber?: string;
    /**
     * Max length: 20 characters
     * @type {string}
     * @memberof Customer
     */
    corporateIdentityNumber?: string;
    /**
     * Max length: 255 characters
     * @type {string}
     * @memberof Customer
     */
    contactPersonEmail?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Customer
     */
    contactPersonMobile?: string;
    /**
     * Max length: 100 characters
     * @type {string}
     * @memberof Customer
     */
    contactPersonName?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Customer
     */
    contactPersonPhone?: string;
    /**
     * Max length: 3 characters. Default value: Currency of the user company
     * @type {string}
     * @memberof Customer
     */
    currencyCode?: string;
    /**
     * Max length: 255 characters
     * @type {string}
     * @memberof Customer
     */
    gLN?: string;
    /**
     * Max length: 255 characters
     * @type {string}
     * @memberof Customer
     */
    emailAddress?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Customer
     */
    invoiceAddress1?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Customer
     */
    invoiceAddress2?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Customer
     */
    invoiceCity: string;
    /**
     * Max length: 2 characters
     * @type {string}
     * @memberof Customer
     */
    invoiceCountryCode?: string;
    /**
     * Max length: 10 characters
     * @type {string}
     * @memberof Customer
     */
    invoicePostalCode: string;
    /**
     * Max length: 100 characters
     * @type {string}
     * @memberof Customer
     */
    deliveryCustomerName?: string;
    /**
     * Max length: 50 characters. Purpose: Only used if invoice address differs from delivery address
     * @type {string}
     * @memberof Customer
     */
    deliveryAddress1?: string;
    /**
     * Max length: 50 characters. Purpose: Only used if invoice address differs from delivery address
     * @type {string}
     * @memberof Customer
     */
    deliveryAddress2?: string;
    /**
     * Max length: 50 characters. Purpose: Only used if invoice city differs from delivery city
     * @type {string}
     * @memberof Customer
     */
    deliveryCity?: string;
    /**
     * Max length: 2 characters. Purpose: Only used if invoice country code differs from delivery country code
     * @type {string}
     * @memberof Customer
     */
    deliveryCountryCode?: string;
    /**
     * Max length: 10 characters. Purpose: Only used if invoice postal code differs from delivery postal code
     * @type {string}
     * @memberof Customer
     */
    deliveryPostalCode?: string;
    /**
     * Source: Get from /v1/deliverymethods
     * @type {string}
     * @memberof Customer
     */
    deliveryMethodId?: string;
    /**
     * Source: Get from /v1/deliveryterms
     * @type {string}
     * @memberof Customer
     */
    deliveryTermId?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Customer
     */
    name: string;
    /**
     * Max length: 4000 characters
     * @type {string}
     * @memberof Customer
     */
    note?: string;
    /**
     * Default: false. Purpose: If true, VatNumber must be set aswell
     * @type {boolean}
     * @memberof Customer
     */
    reverseChargeOnConstructionServices?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    webshopCustomerNumber?: number;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Customer
     */
    mobilePhone?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Customer
     */
    telephone?: string;
    /**
     * Source: Get from /v1/termsofpayment
     * @type {string}
     * @memberof Customer
     */
    termsOfPaymentId: string;
    /**
     * 
     * @type {TermsOfPayment}
     * @memberof Customer
     */
    termsOfPayment?: TermsOfPayment;
    /**
     * Max length: 20 characters. Format: 2 character country code followed by 8-12 numbers.
     * @type {string}
     * @memberof Customer
     */
    vatNumber?: string;
    /**
     * Max length: 255 characters
     * @type {string}
     * @memberof Customer
     */
    wwwAddress?: string;
    /**
     * Purpose: Returns the last invoice date
     * @type {Date}
     * @memberof Customer
     */
    lastInvoiceDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Customer
     */
    isPrivatePerson: boolean;
    /**
     * Purpose: Returns the last date and time from when a change was made on the customer
     * @type {Date}
     * @memberof Customer
     */
    changedUtc?: Date;
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    discountPercentage?: number;
}

export function CustomerFromJSON(json: any): Customer {
    return CustomerFromJSONTyped(json, false);
}

export function CustomerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Customer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'customerNumber': !exists(json, 'CustomerNumber') ? undefined : json['CustomerNumber'],
        'corporateIdentityNumber': !exists(json, 'CorporateIdentityNumber') ? undefined : json['CorporateIdentityNumber'],
        'contactPersonEmail': !exists(json, 'ContactPersonEmail') ? undefined : json['ContactPersonEmail'],
        'contactPersonMobile': !exists(json, 'ContactPersonMobile') ? undefined : json['ContactPersonMobile'],
        'contactPersonName': !exists(json, 'ContactPersonName') ? undefined : json['ContactPersonName'],
        'contactPersonPhone': !exists(json, 'ContactPersonPhone') ? undefined : json['ContactPersonPhone'],
        'currencyCode': !exists(json, 'CurrencyCode') ? undefined : json['CurrencyCode'],
        'gLN': !exists(json, 'GLN') ? undefined : json['GLN'],
        'emailAddress': !exists(json, 'EmailAddress') ? undefined : json['EmailAddress'],
        'invoiceAddress1': !exists(json, 'InvoiceAddress1') ? undefined : json['InvoiceAddress1'],
        'invoiceAddress2': !exists(json, 'InvoiceAddress2') ? undefined : json['InvoiceAddress2'],
        'invoiceCity': json['InvoiceCity'],
        'invoiceCountryCode': !exists(json, 'InvoiceCountryCode') ? undefined : json['InvoiceCountryCode'],
        'invoicePostalCode': json['InvoicePostalCode'],
        'deliveryCustomerName': !exists(json, 'DeliveryCustomerName') ? undefined : json['DeliveryCustomerName'],
        'deliveryAddress1': !exists(json, 'DeliveryAddress1') ? undefined : json['DeliveryAddress1'],
        'deliveryAddress2': !exists(json, 'DeliveryAddress2') ? undefined : json['DeliveryAddress2'],
        'deliveryCity': !exists(json, 'DeliveryCity') ? undefined : json['DeliveryCity'],
        'deliveryCountryCode': !exists(json, 'DeliveryCountryCode') ? undefined : json['DeliveryCountryCode'],
        'deliveryPostalCode': !exists(json, 'DeliveryPostalCode') ? undefined : json['DeliveryPostalCode'],
        'deliveryMethodId': !exists(json, 'DeliveryMethodId') ? undefined : json['DeliveryMethodId'],
        'deliveryTermId': !exists(json, 'DeliveryTermId') ? undefined : json['DeliveryTermId'],
        'name': json['Name'],
        'note': !exists(json, 'Note') ? undefined : json['Note'],
        'reverseChargeOnConstructionServices': !exists(json, 'ReverseChargeOnConstructionServices') ? undefined : json['ReverseChargeOnConstructionServices'],
        'webshopCustomerNumber': !exists(json, 'WebshopCustomerNumber') ? undefined : json['WebshopCustomerNumber'],
        'mobilePhone': !exists(json, 'MobilePhone') ? undefined : json['MobilePhone'],
        'telephone': !exists(json, 'Telephone') ? undefined : json['Telephone'],
        'termsOfPaymentId': json['TermsOfPaymentId'],
        'termsOfPayment': !exists(json, 'TermsOfPayment') ? undefined : TermsOfPaymentFromJSON(json['TermsOfPayment']),
        'vatNumber': !exists(json, 'VatNumber') ? undefined : json['VatNumber'],
        'wwwAddress': !exists(json, 'WwwAddress') ? undefined : json['WwwAddress'],
        'lastInvoiceDate': !exists(json, 'LastInvoiceDate') ? undefined : (new Date(json['LastInvoiceDate'])),
        'isPrivatePerson': json['IsPrivatePerson'],
        'changedUtc': !exists(json, 'ChangedUtc') ? undefined : (new Date(json['ChangedUtc'])),
        'discountPercentage': !exists(json, 'DiscountPercentage') ? undefined : json['DiscountPercentage'],
    };
}

export function CustomerToJSON(value?: Customer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'CustomerNumber': value.customerNumber,
        'CorporateIdentityNumber': value.corporateIdentityNumber,
        'ContactPersonEmail': value.contactPersonEmail,
        'ContactPersonMobile': value.contactPersonMobile,
        'ContactPersonName': value.contactPersonName,
        'ContactPersonPhone': value.contactPersonPhone,
        'CurrencyCode': value.currencyCode,
        'GLN': value.gLN,
        'EmailAddress': value.emailAddress,
        'InvoiceAddress1': value.invoiceAddress1,
        'InvoiceAddress2': value.invoiceAddress2,
        'InvoiceCity': value.invoiceCity,
        'InvoiceCountryCode': value.invoiceCountryCode,
        'InvoicePostalCode': value.invoicePostalCode,
        'DeliveryCustomerName': value.deliveryCustomerName,
        'DeliveryAddress1': value.deliveryAddress1,
        'DeliveryAddress2': value.deliveryAddress2,
        'DeliveryCity': value.deliveryCity,
        'DeliveryCountryCode': value.deliveryCountryCode,
        'DeliveryPostalCode': value.deliveryPostalCode,
        'DeliveryMethodId': value.deliveryMethodId,
        'DeliveryTermId': value.deliveryTermId,
        'Name': value.name,
        'Note': value.note,
        'ReverseChargeOnConstructionServices': value.reverseChargeOnConstructionServices,
        'WebshopCustomerNumber': value.webshopCustomerNumber,
        'MobilePhone': value.mobilePhone,
        'Telephone': value.telephone,
        'TermsOfPaymentId': value.termsOfPaymentId,
        'TermsOfPayment': TermsOfPaymentToJSON(value.termsOfPayment),
        'VatNumber': value.vatNumber,
        'WwwAddress': value.wwwAddress,
        'LastInvoiceDate': value.lastInvoiceDate === undefined ? undefined : (value.lastInvoiceDate.toISOString()),
        'IsPrivatePerson': value.isPrivatePerson,
        'ChangedUtc': value.changedUtc === undefined ? undefined : (value.changedUtc.toISOString()),
        'DiscountPercentage': value.discountPercentage,
    };
}


