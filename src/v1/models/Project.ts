/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * Purpose: Unique Id provided by eAccounting
     * @type {string}
     * @memberof Project
     */
    readonly id?: string;
    /**
     * Max length: 150 characters
     * @type {string}
     * @memberof Project
     */
    number: string;
    /**
     * Max length: 200 characters
     * @type {string}
     * @memberof Project
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof Project
     */
    startDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof Project
     */
    endDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    customerId?: string;
    /**
     * Purpose: CustomerName depending on CustomerId
     * @type {string}
     * @memberof Project
     */
    readonly customerName?: string;
    /**
     * Max length: 500 characters
     * @type {string}
     * @memberof Project
     */
    notes?: string;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    status?: ProjectStatusEnum;
    /**
     * Purpose: Is automatically set
     * @type {Date}
     * @memberof Project
     */
    readonly modifiedUtc?: Date;
}

export function ProjectFromJSON(json: any): Project {
    return ProjectFromJSONTyped(json, false);
}

export function ProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Project {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'number': json['Number'],
        'name': json['Name'],
        'startDate': (new Date(json['StartDate'])),
        'endDate': !exists(json, 'EndDate') ? undefined : (new Date(json['EndDate'])),
        'customerId': !exists(json, 'CustomerId') ? undefined : json['CustomerId'],
        'customerName': !exists(json, 'CustomerName') ? undefined : json['CustomerName'],
        'notes': !exists(json, 'Notes') ? undefined : json['Notes'],
        'status': !exists(json, 'Status') ? undefined : json['Status'],
        'modifiedUtc': !exists(json, 'ModifiedUtc') ? undefined : (new Date(json['ModifiedUtc'])),
    };
}

export function ProjectToJSON(value?: Project | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Number': value.number,
        'Name': value.name,
        'StartDate': (value.startDate.toISOString()),
        'EndDate': value.endDate === undefined ? undefined : (value.endDate.toISOString()),
        'CustomerId': value.customerId,
        'Notes': value.notes,
        'Status': value.status,
    };
}

/**
* @export
* @enum {string}
*/
export enum ProjectStatusEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}


