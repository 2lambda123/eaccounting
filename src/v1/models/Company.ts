/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CompanyText,
    CompanyTextFromJSON,
    CompanyTextFromJSONTyped,
    CompanyTextToJSON,
} from './';

/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    address1?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    address2?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    corporateIdentityNumber?: string;
    /**
     * VAT identification number
     * @type {string}
     * @memberof Company
     */
    vatCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    email?: string;
    /**
     * Only used in Sweden.
     * @type {string}
     * @memberof Company
     */
    bankGiro?: string;
    /**
     * Only used in Sweden.
     * @type {string}
     * @memberof Company
     */
    plusGiro?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    bankAccountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    bankIban?: string;
    /**
     * Global Location Number
     * @type {string}
     * @memberof Company
     */
    gln?: string;
    /**
     * Variant of eAccouting. 1 = Standard, 2 = Invoicing, 3 = Bookkeeping
     * @type {number}
     * @memberof Company
     */
    eAccountingVariant?: CompanyEAccountingVariantEnum;
    /**
     * 
     * @type {CompanyText}
     * @memberof Company
     */
    companyText?: CompanyText;
}

export function CompanyFromJSON(json: any): Company {
    return CompanyFromJSONTyped(json, false);
}

export function CompanyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Company {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'address1': !exists(json, 'Address1') ? undefined : json['Address1'],
        'address2': !exists(json, 'Address2') ? undefined : json['Address2'],
        'postalCode': !exists(json, 'PostalCode') ? undefined : json['PostalCode'],
        'city': !exists(json, 'City') ? undefined : json['City'],
        'corporateIdentityNumber': !exists(json, 'CorporateIdentityNumber') ? undefined : json['CorporateIdentityNumber'],
        'vatCode': !exists(json, 'VatCode') ? undefined : json['VatCode'],
        'email': !exists(json, 'Email') ? undefined : json['Email'],
        'bankGiro': !exists(json, 'BankGiro') ? undefined : json['BankGiro'],
        'plusGiro': !exists(json, 'PlusGiro') ? undefined : json['PlusGiro'],
        'bankAccountNumber': !exists(json, 'BankAccountNumber') ? undefined : json['BankAccountNumber'],
        'bankIban': !exists(json, 'BankIban') ? undefined : json['BankIban'],
        'gln': !exists(json, 'Gln') ? undefined : json['Gln'],
        'eAccountingVariant': !exists(json, 'EAccountingVariant') ? undefined : json['EAccountingVariant'],
        'companyText': !exists(json, 'CompanyText') ? undefined : CompanyTextFromJSON(json['CompanyText']),
    };
}

export function CompanyToJSON(value?: Company | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Name': value.name,
        'Address1': value.address1,
        'Address2': value.address2,
        'PostalCode': value.postalCode,
        'City': value.city,
        'CorporateIdentityNumber': value.corporateIdentityNumber,
        'VatCode': value.vatCode,
        'Email': value.email,
        'BankGiro': value.bankGiro,
        'PlusGiro': value.plusGiro,
        'BankAccountNumber': value.bankAccountNumber,
        'BankIban': value.bankIban,
        'Gln': value.gln,
        'EAccountingVariant': value.eAccountingVariant,
        'CompanyText': CompanyTextToJSON(value.companyText),
    };
}

/**
* @export
* @enum {string}
*/
export enum CompanyEAccountingVariantEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5,
    NUMBER_6 = 6,
    NUMBER_7 = 7,
    NUMBER_8 = 8
}


