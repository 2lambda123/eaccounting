/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AttachmentLink,
    AttachmentLinkFromJSON,
    AttachmentLinkFromJSONTyped,
    AttachmentLinkToJSON,
    VoucherRow,
    VoucherRowFromJSON,
    VoucherRowFromJSONTyped,
    VoucherRowToJSON,
} from './';

/**
 * 
 * @export
 * @interface Voucher
 */
export interface Voucher {
    /**
     * Purpose: Unique Id provided by eAccounting
     * @type {string}
     * @memberof Voucher
     */
    readonly id?: string;
    /**
     * Format: yyyy-mm-dd
     * @type {Date}
     * @memberof Voucher
     */
    voucherDate: Date;
    /**
     * Max length: 100 characters
     * @type {string}
     * @memberof Voucher
     */
    voucherText: string;
    /**
     * 
     * @type {Array<VoucherRow>}
     * @memberof Voucher
     */
    rows: Array<VoucherRow>;
    /**
     * Purpose: Returns the voucher number. Contains voucher serie if used
     * @type {string}
     * @memberof Voucher
     */
    numberAndNumberSeries?: string;
    /**
     * 
     * @type {AttachmentLink}
     * @memberof Voucher
     */
    attachments?: AttachmentLink;
    /**
     * 
     * @type {Date}
     * @memberof Voucher
     */
    modifiedUtc?: Date;
}

export function VoucherFromJSON(json: any): Voucher {
    return VoucherFromJSONTyped(json, false);
}

export function VoucherFromJSONTyped(json: any, ignoreDiscriminator: boolean): Voucher {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'voucherDate': (new Date(json['VoucherDate'])),
        'voucherText': json['VoucherText'],
        'rows': ((json['Rows'] as Array<any>).map(VoucherRowFromJSON)),
        'numberAndNumberSeries': !exists(json, 'NumberAndNumberSeries') ? undefined : json['NumberAndNumberSeries'],
        'attachments': !exists(json, 'Attachments') ? undefined : AttachmentLinkFromJSON(json['Attachments']),
        'modifiedUtc': !exists(json, 'ModifiedUtc') ? undefined : (new Date(json['ModifiedUtc'])),
    };
}

export function VoucherToJSON(value?: Voucher | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'VoucherDate': (value.voucherDate.toISOString()),
        'VoucherText': value.voucherText,
        'Rows': ((value.rows as Array<any>).map(VoucherRowToJSON)),
        'NumberAndNumberSeries': value.numberAndNumberSeries,
        'Attachments': AttachmentLinkToJSON(value.attachments),
        'ModifiedUtc': value.modifiedUtc === undefined ? undefined : (value.modifiedUtc.toISOString()),
    };
}


