/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CustomerInvoiceRow
 */
export interface CustomerInvoiceRow {
    /**
     * 
     * @type {string}
     * @memberof CustomerInvoiceRow
     */
    articleNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerInvoiceRow
     */
    amountNoVat: number;
    /**
     * 
     * @type {number}
     * @memberof CustomerInvoiceRow
     */
    percentVat: number;
    /**
     * 
     * @type {number}
     * @memberof CustomerInvoiceRow
     */
    lineNumber: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerInvoiceRow
     */
    isTextRow: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerInvoiceRow
     */
    text: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerInvoiceRow
     */
    unitPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerInvoiceRow
     */
    unitName?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerInvoiceRow
     */
    discountPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomerInvoiceRow
     */
    quantity?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerInvoiceRow
     */
    isWorkCost: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerInvoiceRow
     */
    isVatFree: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerInvoiceRow
     */
    costCenterItemId1?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInvoiceRow
     */
    costCenterItemId2?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInvoiceRow
     */
    costCenterItemId3?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInvoiceRow
     */
    unitId?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInvoiceRow
     */
    projectId?: string;
}

export function CustomerInvoiceRowFromJSON(json: any): CustomerInvoiceRow {
    return CustomerInvoiceRowFromJSONTyped(json, false);
}

export function CustomerInvoiceRowFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerInvoiceRow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'articleNumber': !exists(json, 'ArticleNumber') ? undefined : json['ArticleNumber'],
        'amountNoVat': json['AmountNoVat'],
        'percentVat': json['PercentVat'],
        'lineNumber': json['LineNumber'],
        'isTextRow': json['IsTextRow'],
        'text': json['Text'],
        'unitPrice': !exists(json, 'UnitPrice') ? undefined : json['UnitPrice'],
        'unitName': !exists(json, 'UnitName') ? undefined : json['UnitName'],
        'discountPercentage': !exists(json, 'DiscountPercentage') ? undefined : json['DiscountPercentage'],
        'quantity': !exists(json, 'Quantity') ? undefined : json['Quantity'],
        'isWorkCost': json['IsWorkCost'],
        'isVatFree': json['IsVatFree'],
        'costCenterItemId1': !exists(json, 'CostCenterItemId1') ? undefined : json['CostCenterItemId1'],
        'costCenterItemId2': !exists(json, 'CostCenterItemId2') ? undefined : json['CostCenterItemId2'],
        'costCenterItemId3': !exists(json, 'CostCenterItemId3') ? undefined : json['CostCenterItemId3'],
        'unitId': !exists(json, 'UnitId') ? undefined : json['UnitId'],
        'projectId': !exists(json, 'ProjectId') ? undefined : json['ProjectId'],
    };
}

export function CustomerInvoiceRowToJSON(value?: CustomerInvoiceRow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ArticleNumber': value.articleNumber,
        'AmountNoVat': value.amountNoVat,
        'PercentVat': value.percentVat,
        'LineNumber': value.lineNumber,
        'IsTextRow': value.isTextRow,
        'Text': value.text,
        'UnitPrice': value.unitPrice,
        'UnitName': value.unitName,
        'DiscountPercentage': value.discountPercentage,
        'Quantity': value.quantity,
        'IsWorkCost': value.isWorkCost,
        'IsVatFree': value.isVatFree,
        'CostCenterItemId1': value.costCenterItemId1,
        'CostCenterItemId2': value.costCenterItemId2,
        'CostCenterItemId3': value.costCenterItemId3,
        'UnitId': value.unitId,
        'ProjectId': value.projectId,
    };
}


