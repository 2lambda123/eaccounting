/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    number?: number;
    /**
     * Describes what kind of VAT that is associated with the account
     * @type {string}
     * @memberof Account
     */
    vatCodeDescription?: string;
    /**
     * The Id of the Fiscal year that the account belongs to
     * @type {string}
     * @memberof Account
     */
    fiscalYearId?: string;
    /**
     * Returns the reference code on the account. This feature is for dutch companies only
     * @type {string}
     * @memberof Account
     */
    referenceCode?: string;
    /**
     * Returns account type number
     * @type {number}
     * @memberof Account
     */
    type?: number;
    /**
     * Returns account type descripion
     * @type {string}
     * @memberof Account
     */
    typeDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    vatCodeId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Account
     */
    modifiedUtc?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Account
     */
    isActive?: boolean;
}

export function AccountFromJSON(json: any): Account {
    return AccountFromJSONTyped(json, false);
}

export function AccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): Account {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'number': !exists(json, 'Number') ? undefined : json['Number'],
        'vatCodeDescription': !exists(json, 'VatCodeDescription') ? undefined : json['VatCodeDescription'],
        'fiscalYearId': !exists(json, 'FiscalYearId') ? undefined : json['FiscalYearId'],
        'referenceCode': !exists(json, 'ReferenceCode') ? undefined : json['ReferenceCode'],
        'type': !exists(json, 'Type') ? undefined : json['Type'],
        'typeDescription': !exists(json, 'TypeDescription') ? undefined : json['TypeDescription'],
        'vatCodeId': !exists(json, 'VatCodeId') ? undefined : json['VatCodeId'],
        'modifiedUtc': !exists(json, 'ModifiedUtc') ? undefined : (new Date(json['ModifiedUtc'])),
        'isActive': !exists(json, 'IsActive') ? undefined : json['IsActive'],
    };
}

export function AccountToJSON(value?: Account | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Name': value.name,
        'Number': value.number,
        'VatCodeDescription': value.vatCodeDescription,
        'FiscalYearId': value.fiscalYearId,
        'ReferenceCode': value.referenceCode,
        'Type': value.type,
        'TypeDescription': value.typeDescription,
        'VatCodeId': value.vatCodeId,
        'ModifiedUtc': value.modifiedUtc === undefined ? undefined : (value.modifiedUtc.toISOString()),
        'IsActive': value.isActive,
    };
}


