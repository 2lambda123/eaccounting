/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Attachment
 */
export interface Attachment {
    /**
     * Purpose: Thumbnail provided by eAccounting
     * @type {string}
     * @memberof Attachment
     */
    readonly thumbNail?: string;
    /**
     * Purpose: If attachment is matched with a document, the Id of that document will be shown here
     * @type {string}
     * @memberof Attachment
     */
    documentId?: string;
    /**
     * 
     * @type {number}
     * @memberof Attachment
     */
    attachedDocumentType?: AttachmentAttachedDocumentTypeEnum;
    /**
     * Format: Must be Base64 encoded byte array
     * @type {string}
     * @memberof Attachment
     */
    data: string;
    /**
     * 
     * @type {number}
     * @memberof Attachment
     */
    attachmentStatus?: AttachmentAttachmentStatusEnum;
    /**
     * Purpose: Id provided by eAccounting
     * @type {string}
     * @memberof Attachment
     */
    readonly id?: string;
    /**
     * = ['image/jpeg' or 'image/png' or 'image/tiff' or 'application/pdf']
     * @type {string}
     * @memberof Attachment
     */
    contentType: string;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    fileName: string;
}

export function AttachmentFromJSON(json: any): Attachment {
    return AttachmentFromJSONTyped(json, false);
}

export function AttachmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Attachment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'thumbNail': !exists(json, 'ThumbNail') ? undefined : json['ThumbNail'],
        'documentId': !exists(json, 'DocumentId') ? undefined : json['DocumentId'],
        'attachedDocumentType': !exists(json, 'AttachedDocumentType') ? undefined : json['AttachedDocumentType'],
        'data': json['Data'],
        'attachmentStatus': !exists(json, 'AttachmentStatus') ? undefined : json['AttachmentStatus'],
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'contentType': json['ContentType'],
        'fileName': json['FileName'],
    };
}

export function AttachmentToJSON(value?: Attachment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'DocumentId': value.documentId,
        'AttachedDocumentType': value.attachedDocumentType,
        'Data': value.data,
        'AttachmentStatus': value.attachmentStatus,
        'ContentType': value.contentType,
        'FileName': value.fileName,
    };
}

/**
* @export
* @enum {string}
*/
export enum AttachmentAttachedDocumentTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5
}
/**
* @export
* @enum {string}
*/
export enum AttachmentAttachmentStatusEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}


