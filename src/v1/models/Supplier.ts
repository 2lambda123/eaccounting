/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Supplier
 */
export interface Supplier {
    /**
     * Purpose: Unique Id provided by eAccounting
     * @type {string}
     * @memberof Supplier
     */
    readonly id?: string;
    /**
     * Max length: 16 characters. Purpose: Unique identifier. If not provided, eAccounting will provide one
     * @type {string}
     * @memberof Supplier
     */
    supplierNumber?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Supplier
     */
    address1?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Supplier
     */
    address2?: string;
    /**
     * Purpose: Indicates if the supplier is paid by an automatic payment service. Supplier invoices to such suppliers will not be sent to the bank via the bank integration
     * Default value: false
     * @type {boolean}
     * @memberof Supplier
     */
    automaticPaymentService?: boolean;
    /**
     * Max length: 50 characters. Purpose: Only used in norwegian and danish eAccounting for domestic payments
     * @type {string}
     * @memberof Supplier
     */
    supplierBankAccountNumber?: string;
    /**
     * Purpose: Used on foreign payments to identify a bankaccount together with Bank Code (SupplierBankCode)
     * Format NO: 11 characters, Format DK: 11-14 characters
     * @type {string}
     * @memberof Supplier
     */
    supplierBankBban?: string;
    /**
     * Purpose: Used on foreign payments to identify a bankaccount together with IBAN (SupplierBankIban)
     * Format: 6 letters followed by 2 or 5 characters (total length 8 or 11)
     * @type {string}
     * @memberof Supplier
     */
    supplierBankBic?: string;
    /**
     * Purpose: Used on foreign payments to identify a bankaccount together with BBAN (SupplierBankBban)
     * Format: 2 letters followed by at least 3 characters
     * @type {string}
     * @memberof Supplier
     */
    supplierBankCode?: string;
    /**
     * Max length: 2 characters. Default value: Country of the supplier
     * @type {string}
     * @memberof Supplier
     */
    supplierBankCountryCode?: string;
    /**
     * Max length: 10 characters. Purpose: Only used in swedish eAccounting, for swedish suppliers
     * @type {string}
     * @memberof Supplier
     */
    supplierBankgiroNumber?: string;
    /**
     * Purpose: Used on foreign payments to identify a bankaccount together with BIC (SupplierBankBic)
     * Format: 2 letters for country code, 2 control digits, 3 characters for bank identification
     * @type {string}
     * @memberof Supplier
     */
    supplierBankIban?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Supplier
     */
    supplierBankName?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Supplier
     */
    city?: string;
    /**
     * Max length: 225 characters
     * @type {string}
     * @memberof Supplier
     */
    contactPersonEmail?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Supplier
     */
    contactPersonMobile?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Supplier
     */
    contactPersonName?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Supplier
     */
    contactPersonPhone?: string;
    /**
     * Max length: 20 characters
     * @type {string}
     * @memberof Supplier
     */
    corporateIdentityNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Supplier
     */
    countryCode?: string;
    /**
     * 
     * @type {Date}
     * @memberof Supplier
     */
    readonly createdUtc?: Date;
    /**
     * Max length: 3 characters. Default value: Currency of the user company
     * @type {string}
     * @memberof Supplier
     */
    currencyCode?: string;
    /**
     * Max length: 225 characters
     * @type {string}
     * @memberof Supplier
     */
    emailAddress?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Supplier
     */
    mobilePhone?: string;
    /**
     * 
     * @type {Date}
     * @memberof Supplier
     */
    readonly modifiedUtc?: Date;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Supplier
     */
    name: string;
    /**
     * Max length: 400 characters
     * @type {string}
     * @memberof Supplier
     */
    note?: string;
    /**
     * Max length: 10 characters. Purpose: Only used in swedish eAccounting, for swedish suppliers
     * @type {string}
     * @memberof Supplier
     */
    supplierPlusgiroNumber?: string;
    /**
     * Max length: 10 characters
     * @type {string}
     * @memberof Supplier
     */
    postalCode?: string;
    /**
     * Max length: 50 characters
     * @type {string}
     * @memberof Supplier
     */
    telephone?: string;
    /**
     * Source: Get from /v1/termsofpayment
     * @type {string}
     * @memberof Supplier
     */
    termsOfPaymentId: string;
    /**
     * Max length: 255 characters
     * @type {string}
     * @memberof Supplier
     */
    wwwAddress?: string;
    /**
     * Purpose: Used for foreign payments to determine which party that pays for aditional bank fees
     * @type {number}
     * @memberof Supplier
     */
    bankFeeCode?: SupplierBankFeeCodeEnum;
    /**
     * Source: Get from /v1/bankaccounts. Purpose: Used for foreign payments to determine which bankaccount the payment will be from
     * @type {string}
     * @memberof Supplier
     */
    payFromBankAccountId?: string;
    /**
     * Source: Get from /v1/foreignpaymentcodes. Purpose: Used for categorization of foreign purchases (NO and SE only).
     * @type {string}
     * @memberof Supplier
     */
    foreignPaymentCodeId?: string;
    /**
     * Purpose: Used if the supplier uses payment reference numbers. (OCR, KID etc.)
     * @type {boolean}
     * @memberof Supplier
     */
    usesPaymentReferenceNumbers: boolean;
    /**
     * Default: true
     * @type {boolean}
     * @memberof Supplier
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Supplier
     */
    selfEmployedWithoutFixedAddress?: boolean;
}

export function SupplierFromJSON(json: any): Supplier {
    return SupplierFromJSONTyped(json, false);
}

export function SupplierFromJSONTyped(json: any, ignoreDiscriminator: boolean): Supplier {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'supplierNumber': !exists(json, 'SupplierNumber') ? undefined : json['SupplierNumber'],
        'address1': !exists(json, 'Address1') ? undefined : json['Address1'],
        'address2': !exists(json, 'Address2') ? undefined : json['Address2'],
        'automaticPaymentService': !exists(json, 'AutomaticPaymentService') ? undefined : json['AutomaticPaymentService'],
        'supplierBankAccountNumber': !exists(json, 'SupplierBankAccountNumber') ? undefined : json['SupplierBankAccountNumber'],
        'supplierBankBban': !exists(json, 'SupplierBankBban') ? undefined : json['SupplierBankBban'],
        'supplierBankBic': !exists(json, 'SupplierBankBic') ? undefined : json['SupplierBankBic'],
        'supplierBankCode': !exists(json, 'SupplierBankCode') ? undefined : json['SupplierBankCode'],
        'supplierBankCountryCode': !exists(json, 'SupplierBankCountryCode') ? undefined : json['SupplierBankCountryCode'],
        'supplierBankgiroNumber': !exists(json, 'SupplierBankgiroNumber') ? undefined : json['SupplierBankgiroNumber'],
        'supplierBankIban': !exists(json, 'SupplierBankIban') ? undefined : json['SupplierBankIban'],
        'supplierBankName': !exists(json, 'SupplierBankName') ? undefined : json['SupplierBankName'],
        'city': !exists(json, 'City') ? undefined : json['City'],
        'contactPersonEmail': !exists(json, 'ContactPersonEmail') ? undefined : json['ContactPersonEmail'],
        'contactPersonMobile': !exists(json, 'ContactPersonMobile') ? undefined : json['ContactPersonMobile'],
        'contactPersonName': !exists(json, 'ContactPersonName') ? undefined : json['ContactPersonName'],
        'contactPersonPhone': !exists(json, 'ContactPersonPhone') ? undefined : json['ContactPersonPhone'],
        'corporateIdentityNumber': !exists(json, 'CorporateIdentityNumber') ? undefined : json['CorporateIdentityNumber'],
        'countryCode': !exists(json, 'CountryCode') ? undefined : json['CountryCode'],
        'createdUtc': !exists(json, 'CreatedUtc') ? undefined : (new Date(json['CreatedUtc'])),
        'currencyCode': !exists(json, 'CurrencyCode') ? undefined : json['CurrencyCode'],
        'emailAddress': !exists(json, 'EmailAddress') ? undefined : json['EmailAddress'],
        'mobilePhone': !exists(json, 'MobilePhone') ? undefined : json['MobilePhone'],
        'modifiedUtc': !exists(json, 'ModifiedUtc') ? undefined : (new Date(json['ModifiedUtc'])),
        'name': json['Name'],
        'note': !exists(json, 'Note') ? undefined : json['Note'],
        'supplierPlusgiroNumber': !exists(json, 'SupplierPlusgiroNumber') ? undefined : json['SupplierPlusgiroNumber'],
        'postalCode': !exists(json, 'PostalCode') ? undefined : json['PostalCode'],
        'telephone': !exists(json, 'Telephone') ? undefined : json['Telephone'],
        'termsOfPaymentId': json['TermsOfPaymentId'],
        'wwwAddress': !exists(json, 'WwwAddress') ? undefined : json['WwwAddress'],
        'bankFeeCode': !exists(json, 'BankFeeCode') ? undefined : json['BankFeeCode'],
        'payFromBankAccountId': !exists(json, 'PayFromBankAccountId') ? undefined : json['PayFromBankAccountId'],
        'foreignPaymentCodeId': !exists(json, 'ForeignPaymentCodeId') ? undefined : json['ForeignPaymentCodeId'],
        'usesPaymentReferenceNumbers': json['UsesPaymentReferenceNumbers'],
        'isActive': !exists(json, 'IsActive') ? undefined : json['IsActive'],
        'selfEmployedWithoutFixedAddress': !exists(json, 'SelfEmployedWithoutFixedAddress') ? undefined : json['SelfEmployedWithoutFixedAddress'],
    };
}

export function SupplierToJSON(value?: Supplier | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'SupplierNumber': value.supplierNumber,
        'Address1': value.address1,
        'Address2': value.address2,
        'AutomaticPaymentService': value.automaticPaymentService,
        'SupplierBankAccountNumber': value.supplierBankAccountNumber,
        'SupplierBankBban': value.supplierBankBban,
        'SupplierBankBic': value.supplierBankBic,
        'SupplierBankCode': value.supplierBankCode,
        'SupplierBankCountryCode': value.supplierBankCountryCode,
        'SupplierBankgiroNumber': value.supplierBankgiroNumber,
        'SupplierBankIban': value.supplierBankIban,
        'SupplierBankName': value.supplierBankName,
        'City': value.city,
        'ContactPersonEmail': value.contactPersonEmail,
        'ContactPersonMobile': value.contactPersonMobile,
        'ContactPersonName': value.contactPersonName,
        'ContactPersonPhone': value.contactPersonPhone,
        'CorporateIdentityNumber': value.corporateIdentityNumber,
        'CountryCode': value.countryCode,
        'CurrencyCode': value.currencyCode,
        'EmailAddress': value.emailAddress,
        'MobilePhone': value.mobilePhone,
        'Name': value.name,
        'Note': value.note,
        'SupplierPlusgiroNumber': value.supplierPlusgiroNumber,
        'PostalCode': value.postalCode,
        'Telephone': value.telephone,
        'TermsOfPaymentId': value.termsOfPaymentId,
        'WwwAddress': value.wwwAddress,
        'BankFeeCode': value.bankFeeCode,
        'PayFromBankAccountId': value.payFromBankAccountId,
        'ForeignPaymentCodeId': value.foreignPaymentCodeId,
        'UsesPaymentReferenceNumbers': value.usesPaymentReferenceNumbers,
        'IsActive': value.isActive,
        'SelfEmployedWithoutFixedAddress': value.selfEmployedWithoutFixedAddress,
    };
}

/**
* @export
* @enum {string}
*/
export enum SupplierBankFeeCodeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3
}


