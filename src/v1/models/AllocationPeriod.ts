/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AllocationPeriodRow,
    AllocationPeriodRowFromJSON,
    AllocationPeriodRowFromJSONTyped,
    AllocationPeriodRowToJSON,
} from './';

/**
 * 
 * @export
 * @interface AllocationPeriod
 */
export interface AllocationPeriod {
    /**
     * 
     * @type {string}
     * @memberof AllocationPeriod
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AllocationPeriod
     */
    supplierInvoiceId: string;
    /**
     * 
     * @type {number}
     * @memberof AllocationPeriod
     */
    supplierInvoiceRowLine: number;
    /**
     * 
     * @type {number}
     * @memberof AllocationPeriod
     */
    readonly allocationPeriodSourceType?: AllocationPeriodAllocationPeriodSourceTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof AllocationPeriod
     */
    status?: AllocationPeriodStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof AllocationPeriod
     */
    costCenterItemId1?: string;
    /**
     * 
     * @type {string}
     * @memberof AllocationPeriod
     */
    costCenterItemId2?: string;
    /**
     * 
     * @type {string}
     * @memberof AllocationPeriod
     */
    costCenterItemId3?: string;
    /**
     * 
     * @type {string}
     * @memberof AllocationPeriod
     */
    projectId?: string;
    /**
     * 
     * @type {Date}
     * @memberof AllocationPeriod
     */
    bookkeepingDate?: Date;
    /**
     * 
     * @type {Array<AllocationPeriodRow>}
     * @memberof AllocationPeriod
     */
    rows: Array<AllocationPeriodRow>;
    /**
     * 
     * @type {number}
     * @memberof AllocationPeriod
     */
    readonly debitAccountNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof AllocationPeriod
     */
    readonly creditAccountNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof AllocationPeriod
     */
    readonly amount?: number;
}

export function AllocationPeriodFromJSON(json: any): AllocationPeriod {
    return AllocationPeriodFromJSONTyped(json, false);
}

export function AllocationPeriodFromJSONTyped(json: any, ignoreDiscriminator: boolean): AllocationPeriod {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'supplierInvoiceId': json['SupplierInvoiceId'],
        'supplierInvoiceRowLine': json['SupplierInvoiceRowLine'],
        'allocationPeriodSourceType': !exists(json, 'AllocationPeriodSourceType') ? undefined : json['AllocationPeriodSourceType'],
        'status': !exists(json, 'Status') ? undefined : json['Status'],
        'costCenterItemId1': !exists(json, 'CostCenterItemId1') ? undefined : json['CostCenterItemId1'],
        'costCenterItemId2': !exists(json, 'CostCenterItemId2') ? undefined : json['CostCenterItemId2'],
        'costCenterItemId3': !exists(json, 'CostCenterItemId3') ? undefined : json['CostCenterItemId3'],
        'projectId': !exists(json, 'ProjectId') ? undefined : json['ProjectId'],
        'bookkeepingDate': !exists(json, 'BookkeepingDate') ? undefined : (new Date(json['BookkeepingDate'])),
        'rows': ((json['Rows'] as Array<any>).map(AllocationPeriodRowFromJSON)),
        'debitAccountNumber': !exists(json, 'DebitAccountNumber') ? undefined : json['DebitAccountNumber'],
        'creditAccountNumber': !exists(json, 'CreditAccountNumber') ? undefined : json['CreditAccountNumber'],
        'amount': !exists(json, 'Amount') ? undefined : json['Amount'],
    };
}

export function AllocationPeriodToJSON(value?: AllocationPeriod | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'SupplierInvoiceId': value.supplierInvoiceId,
        'SupplierInvoiceRowLine': value.supplierInvoiceRowLine,
        'Status': value.status,
        'CostCenterItemId1': value.costCenterItemId1,
        'CostCenterItemId2': value.costCenterItemId2,
        'CostCenterItemId3': value.costCenterItemId3,
        'ProjectId': value.projectId,
        'BookkeepingDate': value.bookkeepingDate === undefined ? undefined : (value.bookkeepingDate.toISOString()),
        'Rows': ((value.rows as Array<any>).map(AllocationPeriodRowToJSON)),
    };
}

/**
* @export
* @enum {string}
*/
export enum AllocationPeriodAllocationPeriodSourceTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
* @export
* @enum {string}
*/
export enum AllocationPeriodStatusEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}


