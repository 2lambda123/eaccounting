/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Voucher,
    VoucherFromJSON,
    VoucherToJSON,
} from '../models';

export interface VouchersGetRequest {
    fiscalYearId: string;
    voucherId: string;
}

export interface VouchersListByFiscalYearRequest {
    fiscalyearId: string;
    changedFromDate?: string;
}

export interface VouchersPostRequest {
    voucher: Voucher;
    useAutomaticVatCalculation?: boolean;
    useDefaultVatCodes?: boolean;
}

/**
 * 
 */
export class VouchersApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing, Solo, Pro, Standard, Bookkeeping, Invoicing, Solo</b></p>
     * Get a specific voucher.
     */
    async vouchersGetRaw(requestParameters: VouchersGetRequest): Promise<runtime.ApiResponse<Voucher>> {
        if (requestParameters.fiscalYearId === null || requestParameters.fiscalYearId === undefined) {
            throw new runtime.RequiredError('fiscalYearId','Required parameter requestParameters.fiscalYearId was null or undefined when calling vouchersGet.');
        }

        if (requestParameters.voucherId === null || requestParameters.voucherId === undefined) {
            throw new runtime.RequiredError('voucherId','Required parameter requestParameters.voucherId was null or undefined when calling vouchersGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vouchers/{fiscalYearId}/{voucherId}`.replace(`{${"fiscalYearId"}}`, encodeURIComponent(String(requestParameters.fiscalYearId))).replace(`{${"voucherId"}}`, encodeURIComponent(String(requestParameters.voucherId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VoucherFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing, Solo, Pro, Standard, Bookkeeping, Invoicing, Solo</b></p>
     * Get a specific voucher.
     */
    async vouchersGet(requestParameters: VouchersGetRequest): Promise<Voucher> {
        const response = await this.vouchersGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing, Solo, Pro, Standard, Bookkeeping, Invoicing, Solo</b></p>
     * Get all vouchers in fiscal year.
     */
    async vouchersListByFiscalYearRaw(requestParameters: VouchersListByFiscalYearRequest): Promise<runtime.ApiResponse<Array<Voucher>>> {
        if (requestParameters.fiscalyearId === null || requestParameters.fiscalyearId === undefined) {
            throw new runtime.RequiredError('fiscalyearId','Required parameter requestParameters.fiscalyearId was null or undefined when calling vouchersListByFiscalYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.changedFromDate !== undefined) {
            queryParameters['changedFromDate'] = requestParameters.changedFromDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vouchers/{fiscalyearId}`.replace(`{${"fiscalyearId"}}`, encodeURIComponent(String(requestParameters.fiscalyearId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VoucherFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing, Solo, Pro, Standard, Bookkeeping, Invoicing, Solo</b></p>
     * Get all vouchers in fiscal year.
     */
    async vouchersListByFiscalYear(requestParameters: VouchersListByFiscalYearRequest): Promise<Array<Voucher>> {
        const response = await this.vouchersListByFiscalYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing, Solo, Pro, Standard, Bookkeeping, Solo</b></p>
     * Create a voucher.
     */
    async vouchersPostRaw(requestParameters: VouchersPostRequest): Promise<runtime.ApiResponse<Voucher>> {
        if (requestParameters.voucher === null || requestParameters.voucher === undefined) {
            throw new runtime.RequiredError('voucher','Required parameter requestParameters.voucher was null or undefined when calling vouchersPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.useAutomaticVatCalculation !== undefined) {
            queryParameters['useAutomaticVatCalculation'] = requestParameters.useAutomaticVatCalculation;
        }

        if (requestParameters.useDefaultVatCodes !== undefined) {
            queryParameters['useDefaultVatCodes'] = requestParameters.useDefaultVatCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/vouchers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VoucherToJSON(requestParameters.voucher),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VoucherFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing, Solo, Pro, Standard, Bookkeeping, Solo</b></p>
     * Create a voucher.
     */
    async vouchersPost(requestParameters: VouchersPostRequest): Promise<Voucher> {
        const response = await this.vouchersPostRaw(requestParameters);
        return await response.value();
    }

}
