/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountBalance,
    AccountBalanceFromJSON,
    AccountBalanceToJSON,
} from '../models';

export interface AccountBalanceGetRequest {
    accountNumber: number;
    date: Date;
}

export interface AccountBalanceListRequest {
    date: Date;
    includeZeroBalance?: boolean;
}

/**
 * 
 */
export class AccountBalanceApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Solo</b></p>
     * Get Account Balance on a specific account and date.
     */
    async accountBalanceGetRaw(requestParameters: AccountBalanceGetRequest): Promise<runtime.ApiResponse<AccountBalance>> {
        if (requestParameters.accountNumber === null || requestParameters.accountNumber === undefined) {
            throw new runtime.RequiredError('accountNumber','Required parameter requestParameters.accountNumber was null or undefined when calling accountBalanceGet.');
        }

        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling accountBalanceGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accountbalances/{accountNumber}/{date}`.replace(`{${"accountNumber"}}`, encodeURIComponent(String(requestParameters.accountNumber))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters.date))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountBalanceFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Solo</b></p>
     * Get Account Balance on a specific account and date.
     */
    async accountBalanceGet(requestParameters: AccountBalanceGetRequest): Promise<AccountBalance> {
        const response = await this.accountBalanceGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Solo</b></p>
     * Get Account balance on a specific date (yyyy-MM-dd). Filter to include accounts where balance is 0.
     */
    async accountBalanceListRaw(requestParameters: AccountBalanceListRequest): Promise<runtime.ApiResponse<Array<AccountBalance>>> {
        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling accountBalanceList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeZeroBalance !== undefined) {
            queryParameters['includeZeroBalance'] = requestParameters.includeZeroBalance;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accountbalances/{date}`.replace(`{${"date"}}`, encodeURIComponent(String(requestParameters.date))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountBalanceFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Solo</b></p>
     * Get Account balance on a specific date (yyyy-MM-dd). Filter to include accounts where balance is 0.
     */
    async accountBalanceList(requestParameters: AccountBalanceListRequest): Promise<Array<AccountBalance>> {
        const response = await this.accountBalanceListRaw(requestParameters);
        return await response.value();
    }

}
