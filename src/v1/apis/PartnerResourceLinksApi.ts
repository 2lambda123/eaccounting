/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PartnerResourceLink,
    PartnerResourceLinkFromJSON,
    PartnerResourceLinkToJSON,
} from '../models';

export interface PartnerResourceLinksDeleteRequest {
    partnerResourceLinkId: string;
}

export interface PartnerResourceLinksListRequest {
    partnerResourceLinkId: string;
}

export interface PartnerResourceLinksPostRequest {
    partnerResourceLink: PartnerResourceLink;
}

export interface PartnerResourceLinksPutRequest {
    partnerResourceLinkId: string;
    partnerResourceLink: PartnerResourceLink;
}

/**
 * 
 */
export class PartnerResourceLinksApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Delete a partner resource link
     */
    async partnerResourceLinksDeleteRaw(requestParameters: PartnerResourceLinksDeleteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.partnerResourceLinkId === null || requestParameters.partnerResourceLinkId === undefined) {
            throw new runtime.RequiredError('partnerResourceLinkId','Required parameter requestParameters.partnerResourceLinkId was null or undefined when calling partnerResourceLinksDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/partnerresourcelinks/{partnerResourceLinkId}`.replace(`{${"partnerResourceLinkId"}}`, encodeURIComponent(String(requestParameters.partnerResourceLinkId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Delete a partner resource link
     */
    async partnerResourceLinksDelete(requestParameters: PartnerResourceLinksDeleteRequest): Promise<object> {
        const response = await this.partnerResourceLinksDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Get a list of partner resource links.
     */
    async partnerResourceLinksGetRaw(): Promise<runtime.ApiResponse<Array<PartnerResourceLink>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/partnerresourcelinks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PartnerResourceLinkFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Get a list of partner resource links.
     */
    async partnerResourceLinksGet(): Promise<Array<PartnerResourceLink>> {
        const response = await this.partnerResourceLinksGetRaw();
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Get a partner resource link by id.
     */
    async partnerResourceLinksListRaw(requestParameters: PartnerResourceLinksListRequest): Promise<runtime.ApiResponse<PartnerResourceLink>> {
        if (requestParameters.partnerResourceLinkId === null || requestParameters.partnerResourceLinkId === undefined) {
            throw new runtime.RequiredError('partnerResourceLinkId','Required parameter requestParameters.partnerResourceLinkId was null or undefined when calling partnerResourceLinksList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/partnerresourcelinks/{partnerResourceLinkId}`.replace(`{${"partnerResourceLinkId"}}`, encodeURIComponent(String(requestParameters.partnerResourceLinkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerResourceLinkFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Get a partner resource link by id.
     */
    async partnerResourceLinksList(requestParameters: PartnerResourceLinksListRequest): Promise<PartnerResourceLink> {
        const response = await this.partnerResourceLinksListRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Create a partner resource link
     */
    async partnerResourceLinksPostRaw(requestParameters: PartnerResourceLinksPostRequest): Promise<runtime.ApiResponse<PartnerResourceLink>> {
        if (requestParameters.partnerResourceLink === null || requestParameters.partnerResourceLink === undefined) {
            throw new runtime.RequiredError('partnerResourceLink','Required parameter requestParameters.partnerResourceLink was null or undefined when calling partnerResourceLinksPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/partnerresourcelinks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerResourceLinkToJSON(requestParameters.partnerResourceLink),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerResourceLinkFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Create a partner resource link
     */
    async partnerResourceLinksPost(requestParameters: PartnerResourceLinksPostRequest): Promise<PartnerResourceLink> {
        const response = await this.partnerResourceLinksPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Update a partner resource link
     */
    async partnerResourceLinksPutRaw(requestParameters: PartnerResourceLinksPutRequest): Promise<runtime.ApiResponse<PartnerResourceLink>> {
        if (requestParameters.partnerResourceLinkId === null || requestParameters.partnerResourceLinkId === undefined) {
            throw new runtime.RequiredError('partnerResourceLinkId','Required parameter requestParameters.partnerResourceLinkId was null or undefined when calling partnerResourceLinksPut.');
        }

        if (requestParameters.partnerResourceLink === null || requestParameters.partnerResourceLink === undefined) {
            throw new runtime.RequiredError('partnerResourceLink','Required parameter requestParameters.partnerResourceLink was null or undefined when calling partnerResourceLinksPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/partnerresourcelinks/{partnerResourceLinkId}`.replace(`{${"partnerResourceLinkId"}}`, encodeURIComponent(String(requestParameters.partnerResourceLinkId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerResourceLinkToJSON(requestParameters.partnerResourceLink),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerResourceLinkFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Update a partner resource link
     */
    async partnerResourceLinksPut(requestParameters: PartnerResourceLinksPutRequest): Promise<PartnerResourceLink> {
        const response = await this.partnerResourceLinksPutRaw(requestParameters);
        return await response.value();
    }

}
