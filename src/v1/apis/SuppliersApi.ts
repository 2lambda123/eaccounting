/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Supplier,
    SupplierFromJSON,
    SupplierToJSON,
} from '../models';

export interface SuppliersGetRequest {
    supplierId: string;
}

export interface SuppliersPostRequest {
    supplier: Supplier;
}

export interface SuppliersPutRequest {
    supplierId: string;
    supplier: Supplier;
}

/**
 * 
 */
export class SuppliersApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase, ea:purchase_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     * Get a specific supplier.
     */
    async suppliersGetRaw(requestParameters: SuppliersGetRequest): Promise<runtime.ApiResponse<Supplier>> {
        if (requestParameters.supplierId === null || requestParameters.supplierId === undefined) {
            throw new runtime.RequiredError('supplierId','Required parameter requestParameters.supplierId was null or undefined when calling suppliersGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/suppliers/{supplierId}`.replace(`{${"supplierId"}}`, encodeURIComponent(String(requestParameters.supplierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SupplierFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase, ea:purchase_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     * Get a specific supplier.
     */
    async suppliersGet(requestParameters: SuppliersGetRequest): Promise<Supplier> {
        const response = await this.suppliersGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     * Create a new supplier.
     */
    async suppliersPostRaw(requestParameters: SuppliersPostRequest): Promise<runtime.ApiResponse<Supplier>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling suppliersPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/suppliers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SupplierToJSON(requestParameters.supplier),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SupplierFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     * Create a new supplier.
     */
    async suppliersPost(requestParameters: SuppliersPostRequest): Promise<Supplier> {
        const response = await this.suppliersPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     * Edit a specific supplier
     */
    async suppliersPutRaw(requestParameters: SuppliersPutRequest): Promise<runtime.ApiResponse<Supplier>> {
        if (requestParameters.supplierId === null || requestParameters.supplierId === undefined) {
            throw new runtime.RequiredError('supplierId','Required parameter requestParameters.supplierId was null or undefined when calling suppliersPut.');
        }

        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling suppliersPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/suppliers/{supplierId}`.replace(`{${"supplierId"}}`, encodeURIComponent(String(requestParameters.supplierId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SupplierToJSON(requestParameters.supplier),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SupplierFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     * Edit a specific supplier
     */
    async suppliersPut(requestParameters: SuppliersPutRequest): Promise<Supplier> {
        const response = await this.suppliersPutRaw(requestParameters);
        return await response.value();
    }

}
