/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Account,
    AccountFromJSON,
    AccountToJSON,
} from '../models';

export interface AccountsGetRequest {
    fiscalyearId: string;
    accountNumber: number;
}

export interface AccountsListByFiscalYearRequest {
    fiscalyearId: string;
    changedFromDate?: string;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Get a single account by account number
     */
    async accountsGetRaw(requestParameters: AccountsGetRequest): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.fiscalyearId === null || requestParameters.fiscalyearId === undefined) {
            throw new runtime.RequiredError('fiscalyearId','Required parameter requestParameters.fiscalyearId was null or undefined when calling accountsGet.');
        }

        if (requestParameters.accountNumber === null || requestParameters.accountNumber === undefined) {
            throw new runtime.RequiredError('accountNumber','Required parameter requestParameters.accountNumber was null or undefined when calling accountsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts/{fiscalyearId}/{accountNumber}`.replace(`{${"fiscalyearId"}}`, encodeURIComponent(String(requestParameters.fiscalyearId))).replace(`{${"accountNumber"}}`, encodeURIComponent(String(requestParameters.accountNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Get a single account by account number
     */
    async accountsGet(requestParameters: AccountsGetRequest): Promise<Account> {
        const response = await this.accountsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Get a list of accounts
     */
    async accountsListByFiscalYearRaw(requestParameters: AccountsListByFiscalYearRequest): Promise<runtime.ApiResponse<Array<Account>>> {
        if (requestParameters.fiscalyearId === null || requestParameters.fiscalyearId === undefined) {
            throw new runtime.RequiredError('fiscalyearId','Required parameter requestParameters.fiscalyearId was null or undefined when calling accountsListByFiscalYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.changedFromDate !== undefined) {
            queryParameters['changedFromDate'] = requestParameters.changedFromDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts/{fiscalyearId}`.replace(`{${"fiscalyearId"}}`, encodeURIComponent(String(requestParameters.fiscalyearId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Bookkeeping, Solo</b></p>
     * Get a list of accounts
     */
    async accountsListByFiscalYear(requestParameters: AccountsListByFiscalYearRequest): Promise<Array<Account>> {
        const response = await this.accountsListByFiscalYearRaw(requestParameters);
        return await response.value();
    }

}
