/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomerInvoiceListItem,
    CustomerInvoiceListItemFromJSON,
    CustomerInvoiceListItemToJSON,
} from '../models';

export interface CustomerInvoiceListItemsGetRequest {
    customerId: string;
    changedFromDate?: string;
    includePaid?: boolean;
    fromInvoiceNumber?: number;
    createdFromDraftId?: string;
}

export interface CustomerInvoiceListItemsListRequest {
    changedFromDate?: string;
    includePaid?: boolean;
    fromInvoiceNumber?: number;
    createdFromDraftId?: string;
}

/**
 * 
 */
export class CustomerInvoiceListItemsApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Get a list of all customer invoices on a specific customer. Filter by including or excluding already paid invoices.
     */
    async customerInvoiceListItemsGetRaw(requestParameters: CustomerInvoiceListItemsGetRequest): Promise<runtime.ApiResponse<Array<CustomerInvoiceListItem>>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling customerInvoiceListItemsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.changedFromDate !== undefined) {
            queryParameters['changedFromDate'] = requestParameters.changedFromDate;
        }

        if (requestParameters.includePaid !== undefined) {
            queryParameters['includePaid'] = requestParameters.includePaid;
        }

        if (requestParameters.fromInvoiceNumber !== undefined) {
            queryParameters['fromInvoiceNumber'] = requestParameters.fromInvoiceNumber;
        }

        if (requestParameters.createdFromDraftId !== undefined) {
            queryParameters['createdFromDraftId'] = requestParameters.createdFromDraftId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customerinvoicelistitems/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerInvoiceListItemFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Get a list of all customer invoices on a specific customer. Filter by including or excluding already paid invoices.
     */
    async customerInvoiceListItemsGet(requestParameters: CustomerInvoiceListItemsGetRequest): Promise<Array<CustomerInvoiceListItem>> {
        const response = await this.customerInvoiceListItemsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of all customer invoices, represented by a light-weight object without all the details of a full customer invoice.  Filter by including or excluding already paid invoices.<p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * List all customer invoices
     */
    async customerInvoiceListItemsListRaw(requestParameters: CustomerInvoiceListItemsListRequest): Promise<runtime.ApiResponse<Array<CustomerInvoiceListItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.changedFromDate !== undefined) {
            queryParameters['changedFromDate'] = requestParameters.changedFromDate;
        }

        if (requestParameters.includePaid !== undefined) {
            queryParameters['includePaid'] = requestParameters.includePaid;
        }

        if (requestParameters.fromInvoiceNumber !== undefined) {
            queryParameters['fromInvoiceNumber'] = requestParameters.fromInvoiceNumber;
        }

        if (requestParameters.createdFromDraftId !== undefined) {
            queryParameters['createdFromDraftId'] = requestParameters.createdFromDraftId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customerinvoicelistitems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerInvoiceListItemFromJSON));
    }

    /**
     * Get a list of all customer invoices, represented by a light-weight object without all the details of a full customer invoice.  Filter by including or excluding already paid invoices.<p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * List all customer invoices
     */
    async customerInvoiceListItemsList(requestParameters: CustomerInvoiceListItemsListRequest): Promise<Array<CustomerInvoiceListItem>> {
        const response = await this.customerInvoiceListItemsListRaw(requestParameters);
        return await response.value();
    }

}
