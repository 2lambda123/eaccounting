/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CostCenterItem,
    CostCenterItemFromJSON,
    CostCenterItemToJSON,
} from '../models';

export interface CostCenterItemsGetRequest {
    itemId: string;
}

export interface CostCenterItemsPostRequest {
    item: CostCenterItem;
}

export interface CostCenterItemsPutRequest {
    itemId: string;
    item: CostCenterItem;
}

/**
 * 
 */
export class CostCenterItemsApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly, ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing</b></p>
     * Get a specific Cost center item.
     */
    async costCenterItemsGetRaw(requestParameters: CostCenterItemsGetRequest): Promise<runtime.ApiResponse<CostCenterItem>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling costCenterItemsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/costcenteritems/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CostCenterItemFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly, ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing</b></p>
     * Get a specific Cost center item.
     */
    async costCenterItemsGet(requestParameters: CostCenterItemsGetRequest): Promise<CostCenterItem> {
        const response = await this.costCenterItemsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing</b></p>
     * Create a new Cost Center Item.
     */
    async costCenterItemsPostRaw(requestParameters: CostCenterItemsPostRequest): Promise<runtime.ApiResponse<CostCenterItem>> {
        if (requestParameters.item === null || requestParameters.item === undefined) {
            throw new runtime.RequiredError('item','Required parameter requestParameters.item was null or undefined when calling costCenterItemsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/costcenteritems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CostCenterItemToJSON(requestParameters.item),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CostCenterItemFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing</b></p>
     * Create a new Cost Center Item.
     */
    async costCenterItemsPost(requestParameters: CostCenterItemsPostRequest): Promise<CostCenterItem> {
        const response = await this.costCenterItemsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing</b></p>
     * Put costcenter items.
     */
    async costCenterItemsPutRaw(requestParameters: CostCenterItemsPutRequest): Promise<runtime.ApiResponse<CostCenterItem>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling costCenterItemsPut.');
        }

        if (requestParameters.item === null || requestParameters.item === undefined) {
            throw new runtime.RequiredError('item','Required parameter requestParameters.item was null or undefined when calling costCenterItemsPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/costcenteritems/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CostCenterItemToJSON(requestParameters.item),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CostCenterItemFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing</b></p>
     * Put costcenter items.
     */
    async costCenterItemsPut(requestParameters: CostCenterItemsPutRequest): Promise<CostCenterItem> {
        const response = await this.costCenterItemsPutRaw(requestParameters);
        return await response.value();
    }

}
