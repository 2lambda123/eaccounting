/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Article,
    ArticleFromJSON,
    ArticleToJSON,
    ArticleLabel,
    ArticleLabelFromJSON,
    ArticleLabelToJSON,
} from '../models';

export interface ArticleLabelsGetRequest {
    articleLabelId: string;
}

export interface ArticleLabelsPostRequest {
    fromArticleLabel: ArticleLabel;
}

export interface ArticleLabelsPutRequest {
    articleLabelId: string;
    fromArticleLabel: ArticleLabel;
}

/**
 * 
 */
export class ArticleLabelsApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing</b></p>
     * Gets an articlelabel by id.
     */
    async articleLabelsGetRaw(requestParameters: ArticleLabelsGetRequest): Promise<runtime.ApiResponse<Article>> {
        if (requestParameters.articleLabelId === null || requestParameters.articleLabelId === undefined) {
            throw new runtime.RequiredError('articleLabelId','Required parameter requestParameters.articleLabelId was null or undefined when calling articleLabelsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articlelabels/{articleLabelId}`.replace(`{${"articleLabelId"}}`, encodeURIComponent(String(requestParameters.articleLabelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing</b></p>
     * Gets an articlelabel by id.
     */
    async articleLabelsGet(requestParameters: ArticleLabelsGetRequest): Promise<Article> {
        const response = await this.articleLabelsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing</b></p>
     * Gets all articlelabels.
     */
    async articleLabelsListRaw(): Promise<runtime.ApiResponse<Array<ArticleLabel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articlelabels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleLabelFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing</b></p>
     * Gets all articlelabels.
     */
    async articleLabelsList(): Promise<Array<ArticleLabel>> {
        const response = await this.articleLabelsListRaw();
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing</b></p>
     * Create a articlelabel
     */
    async articleLabelsPostRaw(requestParameters: ArticleLabelsPostRequest): Promise<runtime.ApiResponse<ArticleLabel>> {
        if (requestParameters.fromArticleLabel === null || requestParameters.fromArticleLabel === undefined) {
            throw new runtime.RequiredError('fromArticleLabel','Required parameter requestParameters.fromArticleLabel was null or undefined when calling articleLabelsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/articlelabels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleLabelToJSON(requestParameters.fromArticleLabel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleLabelFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing</b></p>
     * Create a articlelabel
     */
    async articleLabelsPost(requestParameters: ArticleLabelsPostRequest): Promise<ArticleLabel> {
        const response = await this.articleLabelsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing</b></p>
     * Update a articlelabel
     */
    async articleLabelsPutRaw(requestParameters: ArticleLabelsPutRequest): Promise<runtime.ApiResponse<ArticleLabel>> {
        if (requestParameters.articleLabelId === null || requestParameters.articleLabelId === undefined) {
            throw new runtime.RequiredError('articleLabelId','Required parameter requestParameters.articleLabelId was null or undefined when calling articleLabelsPut.');
        }

        if (requestParameters.fromArticleLabel === null || requestParameters.fromArticleLabel === undefined) {
            throw new runtime.RequiredError('fromArticleLabel','Required parameter requestParameters.fromArticleLabel was null or undefined when calling articleLabelsPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/articlelabels/{articleLabelId}`.replace(`{${"articleLabelId"}}`, encodeURIComponent(String(requestParameters.articleLabelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleLabelToJSON(requestParameters.fromArticleLabel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleLabelFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing</b></p>
     * Update a articlelabel
     */
    async articleLabelsPut(requestParameters: ArticleLabelsPutRequest): Promise<ArticleLabel> {
        const response = await this.articleLabelsPutRaw(requestParameters);
        return await response.value();
    }

}
