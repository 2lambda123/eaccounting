/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SupplierInvoiceDraft,
    SupplierInvoiceDraftFromJSON,
    SupplierInvoiceDraftToJSON,
} from '../models';

export interface SupplierInvoiceDraftsGetRequest {
    supplierInvoiceDraftId: string;
}

export interface SupplierInvoiceDraftsPostRequest {
    postedSupplierInvoiceDraft: SupplierInvoiceDraft;
    useDefaultVatCodes?: boolean;
    calculateVatOnCostAccounts?: boolean;
    batchProcessExtendedValidation?: boolean;
    duplicateCheckExtendedValidation?: boolean;
}

export interface SupplierInvoiceDraftsPutRequest {
    supplierInvoiceDraftId: string;
    supplierInvoiceDraft: SupplierInvoiceDraft;
    useDefaultVatCodes?: boolean;
    calculateVatOnCostAccounts?: boolean;
}

/**
 * 
 */
export class SupplierInvoiceDraftsApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase, ea:purchase_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     */
    async supplierInvoiceDraftsGetRaw(requestParameters: SupplierInvoiceDraftsGetRequest): Promise<runtime.ApiResponse<SupplierInvoiceDraft>> {
        if (requestParameters.supplierInvoiceDraftId === null || requestParameters.supplierInvoiceDraftId === undefined) {
            throw new runtime.RequiredError('supplierInvoiceDraftId','Required parameter requestParameters.supplierInvoiceDraftId was null or undefined when calling supplierInvoiceDraftsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/supplierinvoicedrafts/{supplierInvoiceDraftId}`.replace(`{${"supplierInvoiceDraftId"}}`, encodeURIComponent(String(requestParameters.supplierInvoiceDraftId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SupplierInvoiceDraftFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase, ea:purchase_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     */
    async supplierInvoiceDraftsGet(requestParameters: SupplierInvoiceDraftsGetRequest): Promise<SupplierInvoiceDraft> {
        const response = await this.supplierInvoiceDraftsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase, ea:purchase_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     */
    async supplierInvoiceDraftsListRaw(): Promise<runtime.ApiResponse<Array<SupplierInvoiceDraft>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/supplierinvoicedrafts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SupplierInvoiceDraftFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase, ea:purchase_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     */
    async supplierInvoiceDraftsList(): Promise<Array<SupplierInvoiceDraft>> {
        const response = await this.supplierInvoiceDraftsListRaw();
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     * Create a supplier invoice draft.
     */
    async supplierInvoiceDraftsPostRaw(requestParameters: SupplierInvoiceDraftsPostRequest): Promise<runtime.ApiResponse<SupplierInvoiceDraft>> {
        if (requestParameters.postedSupplierInvoiceDraft === null || requestParameters.postedSupplierInvoiceDraft === undefined) {
            throw new runtime.RequiredError('postedSupplierInvoiceDraft','Required parameter requestParameters.postedSupplierInvoiceDraft was null or undefined when calling supplierInvoiceDraftsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.useDefaultVatCodes !== undefined) {
            queryParameters['useDefaultVatCodes'] = requestParameters.useDefaultVatCodes;
        }

        if (requestParameters.calculateVatOnCostAccounts !== undefined) {
            queryParameters['calculateVatOnCostAccounts'] = requestParameters.calculateVatOnCostAccounts;
        }

        if (requestParameters.batchProcessExtendedValidation !== undefined) {
            queryParameters['batchProcessExtendedValidation'] = requestParameters.batchProcessExtendedValidation;
        }

        if (requestParameters.duplicateCheckExtendedValidation !== undefined) {
            queryParameters['duplicateCheckExtendedValidation'] = requestParameters.duplicateCheckExtendedValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/supplierinvoicedrafts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SupplierInvoiceDraftToJSON(requestParameters.postedSupplierInvoiceDraft),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SupplierInvoiceDraftFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     * Create a supplier invoice draft.
     */
    async supplierInvoiceDraftsPost(requestParameters: SupplierInvoiceDraftsPostRequest): Promise<SupplierInvoiceDraft> {
        const response = await this.supplierInvoiceDraftsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     * Update a supplier invoice draft.
     */
    async supplierInvoiceDraftsPutRaw(requestParameters: SupplierInvoiceDraftsPutRequest): Promise<runtime.ApiResponse<SupplierInvoiceDraft>> {
        if (requestParameters.supplierInvoiceDraftId === null || requestParameters.supplierInvoiceDraftId === undefined) {
            throw new runtime.RequiredError('supplierInvoiceDraftId','Required parameter requestParameters.supplierInvoiceDraftId was null or undefined when calling supplierInvoiceDraftsPut.');
        }

        if (requestParameters.supplierInvoiceDraft === null || requestParameters.supplierInvoiceDraft === undefined) {
            throw new runtime.RequiredError('supplierInvoiceDraft','Required parameter requestParameters.supplierInvoiceDraft was null or undefined when calling supplierInvoiceDraftsPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.useDefaultVatCodes !== undefined) {
            queryParameters['useDefaultVatCodes'] = requestParameters.useDefaultVatCodes;
        }

        if (requestParameters.calculateVatOnCostAccounts !== undefined) {
            queryParameters['calculateVatOnCostAccounts'] = requestParameters.calculateVatOnCostAccounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/supplierinvoicedrafts/{supplierInvoiceDraftId}`.replace(`{${"supplierInvoiceDraftId"}}`, encodeURIComponent(String(requestParameters.supplierInvoiceDraftId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SupplierInvoiceDraftToJSON(requestParameters.supplierInvoiceDraft),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SupplierInvoiceDraftFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Solo</b></p>
     * Update a supplier invoice draft.
     */
    async supplierInvoiceDraftsPut(requestParameters: SupplierInvoiceDraftsPutRequest): Promise<SupplierInvoiceDraft> {
        const response = await this.supplierInvoiceDraftsPutRaw(requestParameters);
        return await response.value();
    }

}
