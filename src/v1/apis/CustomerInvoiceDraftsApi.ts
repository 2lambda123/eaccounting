/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomerInvoiceDraft,
    CustomerInvoiceDraftFromJSON,
    CustomerInvoiceDraftToJSON,
} from '../models';

export interface CustomerInvoiceDraftsDeleteRequest {
    invoiceDraftId: string;
}

export interface CustomerInvoiceDraftsGetRequest {
    invoiceDraftId: string;
}

export interface CustomerInvoiceDraftsPostRequest {
    customerInvoiceDraft: CustomerInvoiceDraft;
}

export interface CustomerInvoiceDraftsPutRequest {
    invoiceDraftId: string;
    customerInvoiceDraft: CustomerInvoiceDraft;
}

/**
 * 
 */
export class CustomerInvoiceDraftsApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Delete a customer invoice draft.
     */
    async customerInvoiceDraftsDeleteRaw(requestParameters: CustomerInvoiceDraftsDeleteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.invoiceDraftId === null || requestParameters.invoiceDraftId === undefined) {
            throw new runtime.RequiredError('invoiceDraftId','Required parameter requestParameters.invoiceDraftId was null or undefined when calling customerInvoiceDraftsDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customerinvoicedrafts/{invoiceDraftId}`.replace(`{${"invoiceDraftId"}}`, encodeURIComponent(String(requestParameters.invoiceDraftId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Delete a customer invoice draft.
     */
    async customerInvoiceDraftsDelete(requestParameters: CustomerInvoiceDraftsDeleteRequest): Promise<object> {
        const response = await this.customerInvoiceDraftsDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Get customer invoice draft by id.
     */
    async customerInvoiceDraftsGetRaw(requestParameters: CustomerInvoiceDraftsGetRequest): Promise<runtime.ApiResponse<CustomerInvoiceDraft>> {
        if (requestParameters.invoiceDraftId === null || requestParameters.invoiceDraftId === undefined) {
            throw new runtime.RequiredError('invoiceDraftId','Required parameter requestParameters.invoiceDraftId was null or undefined when calling customerInvoiceDraftsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customerinvoicedrafts/{invoiceDraftId}`.replace(`{${"invoiceDraftId"}}`, encodeURIComponent(String(requestParameters.invoiceDraftId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerInvoiceDraftFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Get customer invoice draft by id.
     */
    async customerInvoiceDraftsGet(requestParameters: CustomerInvoiceDraftsGetRequest): Promise<CustomerInvoiceDraft> {
        const response = await this.customerInvoiceDraftsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Get all customer invoice drafts.
     */
    async customerInvoiceDraftsListRaw(): Promise<runtime.ApiResponse<Array<CustomerInvoiceDraft>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customerinvoicedrafts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerInvoiceDraftFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Get all customer invoice drafts.
     */
    async customerInvoiceDraftsList(): Promise<Array<CustomerInvoiceDraft>> {
        const response = await this.customerInvoiceDraftsListRaw();
        return await response.value();
    }

    /**
     * IsVatFree attribute on a CustomerInvoiceDraftRow shall only be used for articels with reverse VAT charge. For other VAT free articles IsVatFree shall be set to \'false\'.<p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Create a customer invoice draft.
     */
    async customerInvoiceDraftsPostRaw(requestParameters: CustomerInvoiceDraftsPostRequest): Promise<runtime.ApiResponse<CustomerInvoiceDraft>> {
        if (requestParameters.customerInvoiceDraft === null || requestParameters.customerInvoiceDraft === undefined) {
            throw new runtime.RequiredError('customerInvoiceDraft','Required parameter requestParameters.customerInvoiceDraft was null or undefined when calling customerInvoiceDraftsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customerinvoicedrafts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerInvoiceDraftToJSON(requestParameters.customerInvoiceDraft),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerInvoiceDraftFromJSON(jsonValue));
    }

    /**
     * IsVatFree attribute on a CustomerInvoiceDraftRow shall only be used for articels with reverse VAT charge. For other VAT free articles IsVatFree shall be set to \'false\'.<p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Create a customer invoice draft.
     */
    async customerInvoiceDraftsPost(requestParameters: CustomerInvoiceDraftsPostRequest): Promise<CustomerInvoiceDraft> {
        const response = await this.customerInvoiceDraftsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Update a customer invoice draft.
     */
    async customerInvoiceDraftsPutRaw(requestParameters: CustomerInvoiceDraftsPutRequest): Promise<runtime.ApiResponse<CustomerInvoiceDraft>> {
        if (requestParameters.invoiceDraftId === null || requestParameters.invoiceDraftId === undefined) {
            throw new runtime.RequiredError('invoiceDraftId','Required parameter requestParameters.invoiceDraftId was null or undefined when calling customerInvoiceDraftsPut.');
        }

        if (requestParameters.customerInvoiceDraft === null || requestParameters.customerInvoiceDraft === undefined) {
            throw new runtime.RequiredError('customerInvoiceDraft','Required parameter requestParameters.customerInvoiceDraft was null or undefined when calling customerInvoiceDraftsPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customerinvoicedrafts/{invoiceDraftId}`.replace(`{${"invoiceDraftId"}}`, encodeURIComponent(String(requestParameters.invoiceDraftId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerInvoiceDraftToJSON(requestParameters.customerInvoiceDraft),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerInvoiceDraftFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Update a customer invoice draft.
     */
    async customerInvoiceDraftsPut(requestParameters: CustomerInvoiceDraftsPutRequest): Promise<CustomerInvoiceDraft> {
        const response = await this.customerInvoiceDraftsPutRaw(requestParameters);
        return await response.value();
    }

}
