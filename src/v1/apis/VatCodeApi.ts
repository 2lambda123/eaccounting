/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    VatCode,
    VatCodeFromJSON,
    VatCodeToJSON,
} from '../models';

export interface VatCodeGetRequest {
    id: string;
    vatRateDate?: string;
}

export interface VatCodeListRequest {
    vatRateDate?: string;
}

/**
 * 
 */
export class VatCodeApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing, Solo</b></p>
     * Get a Vatcode item by id
     */
    async vatCodeGetRaw(requestParameters: VatCodeGetRequest): Promise<runtime.ApiResponse<Array<VatCode>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling vatCodeGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.vatRateDate !== undefined) {
            queryParameters['vatRateDate'] = requestParameters.vatRateDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vatcodes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VatCodeFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing, Solo</b></p>
     * Get a Vatcode item by id
     */
    async vatCodeGet(requestParameters: VatCodeGetRequest): Promise<Array<VatCode>> {
        const response = await this.vatCodeGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing, Solo</b></p>
     * Gets a list of all Vat Codes
     */
    async vatCodeListRaw(requestParameters: VatCodeListRequest): Promise<runtime.ApiResponse<Array<VatCode>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.vatRateDate !== undefined) {
            queryParameters['vatRateDate'] = requestParameters.vatRateDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vatcodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VatCodeFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:accounting, ea:accounting_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Bookkeeping, Invoicing, Solo</b></p>
     * Gets a list of all Vat Codes
     */
    async vatCodeList(requestParameters: VatCodeListRequest): Promise<Array<VatCode>> {
        const response = await this.vatCodeListRaw(requestParameters);
        return await response.value();
    }

}
