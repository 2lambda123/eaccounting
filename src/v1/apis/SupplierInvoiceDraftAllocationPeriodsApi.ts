/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AllocationPeriod,
    AllocationPeriodFromJSON,
    AllocationPeriodToJSON,
    SupplierInvoiceDraftAllocationPlan,
    SupplierInvoiceDraftAllocationPlanFromJSON,
    SupplierInvoiceDraftAllocationPlanToJSON,
} from '../models';

export interface SupplierInvoiceDraftAllocationPeriodsDeleteRequest {
    supplierInvoiceDraftId: string;
}

export interface SupplierInvoiceDraftAllocationPeriodsGetRequest {
    supplierInvoiceDraftId: string;
}

export interface SupplierInvoiceDraftAllocationPeriodsPostRequest {
    supplierInvoiceDraftId: string;
    postedAllocationPlans: Array<SupplierInvoiceDraftAllocationPlan>;
}

export interface SupplierInvoiceDraftAllocationPeriodsPutRequest {
    supplierInvoiceDraftId: string;
    postedAllocationPlans: Array<SupplierInvoiceDraftAllocationPlan>;
}

/**
 * 
 */
export class SupplierInvoiceDraftAllocationPeriodsApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard</b></p>
     * Delete all allocation periods for an existing supplier invoice draft.
     */
    async supplierInvoiceDraftAllocationPeriodsDeleteRaw(requestParameters: SupplierInvoiceDraftAllocationPeriodsDeleteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.supplierInvoiceDraftId === null || requestParameters.supplierInvoiceDraftId === undefined) {
            throw new runtime.RequiredError('supplierInvoiceDraftId','Required parameter requestParameters.supplierInvoiceDraftId was null or undefined when calling supplierInvoiceDraftAllocationPeriodsDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/supplierinvoicedrafts/{supplierInvoiceDraftId}/allocationperiods`.replace(`{${"supplierInvoiceDraftId"}}`, encodeURIComponent(String(requestParameters.supplierInvoiceDraftId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard</b></p>
     * Delete all allocation periods for an existing supplier invoice draft.
     */
    async supplierInvoiceDraftAllocationPeriodsDelete(requestParameters: SupplierInvoiceDraftAllocationPeriodsDeleteRequest): Promise<object> {
        const response = await this.supplierInvoiceDraftAllocationPeriodsDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase, ea:purchase_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard</b></p>
     * Get all allocation periods for an existing supplier invoice draft.
     */
    async supplierInvoiceDraftAllocationPeriodsGetRaw(requestParameters: SupplierInvoiceDraftAllocationPeriodsGetRequest): Promise<runtime.ApiResponse<Array<AllocationPeriod>>> {
        if (requestParameters.supplierInvoiceDraftId === null || requestParameters.supplierInvoiceDraftId === undefined) {
            throw new runtime.RequiredError('supplierInvoiceDraftId','Required parameter requestParameters.supplierInvoiceDraftId was null or undefined when calling supplierInvoiceDraftAllocationPeriodsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/supplierinvoicedrafts/{supplierInvoiceDraftId}/allocationperiods`.replace(`{${"supplierInvoiceDraftId"}}`, encodeURIComponent(String(requestParameters.supplierInvoiceDraftId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AllocationPeriodFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase, ea:purchase_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard</b></p>
     * Get all allocation periods for an existing supplier invoice draft.
     */
    async supplierInvoiceDraftAllocationPeriodsGet(requestParameters: SupplierInvoiceDraftAllocationPeriodsGetRequest): Promise<Array<AllocationPeriod>> {
        const response = await this.supplierInvoiceDraftAllocationPeriodsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard</b></p>
     * Create allocation periods to an existing supplier invoice draft.
     */
    async supplierInvoiceDraftAllocationPeriodsPostRaw(requestParameters: SupplierInvoiceDraftAllocationPeriodsPostRequest): Promise<runtime.ApiResponse<Array<AllocationPeriod>>> {
        if (requestParameters.supplierInvoiceDraftId === null || requestParameters.supplierInvoiceDraftId === undefined) {
            throw new runtime.RequiredError('supplierInvoiceDraftId','Required parameter requestParameters.supplierInvoiceDraftId was null or undefined when calling supplierInvoiceDraftAllocationPeriodsPost.');
        }

        if (requestParameters.postedAllocationPlans === null || requestParameters.postedAllocationPlans === undefined) {
            throw new runtime.RequiredError('postedAllocationPlans','Required parameter requestParameters.postedAllocationPlans was null or undefined when calling supplierInvoiceDraftAllocationPeriodsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/supplierinvoicedrafts/{supplierInvoiceDraftId}/allocationperiods`.replace(`{${"supplierInvoiceDraftId"}}`, encodeURIComponent(String(requestParameters.supplierInvoiceDraftId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.postedAllocationPlans.map(SupplierInvoiceDraftAllocationPlanToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AllocationPeriodFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard</b></p>
     * Create allocation periods to an existing supplier invoice draft.
     */
    async supplierInvoiceDraftAllocationPeriodsPost(requestParameters: SupplierInvoiceDraftAllocationPeriodsPostRequest): Promise<Array<AllocationPeriod>> {
        const response = await this.supplierInvoiceDraftAllocationPeriodsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard</b></p>
     * Update existing allocation periods in an existing supplier invoice draft.
     */
    async supplierInvoiceDraftAllocationPeriodsPutRaw(requestParameters: SupplierInvoiceDraftAllocationPeriodsPutRequest): Promise<runtime.ApiResponse<Array<AllocationPeriod>>> {
        if (requestParameters.supplierInvoiceDraftId === null || requestParameters.supplierInvoiceDraftId === undefined) {
            throw new runtime.RequiredError('supplierInvoiceDraftId','Required parameter requestParameters.supplierInvoiceDraftId was null or undefined when calling supplierInvoiceDraftAllocationPeriodsPut.');
        }

        if (requestParameters.postedAllocationPlans === null || requestParameters.postedAllocationPlans === undefined) {
            throw new runtime.RequiredError('postedAllocationPlans','Required parameter requestParameters.postedAllocationPlans was null or undefined when calling supplierInvoiceDraftAllocationPeriodsPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/supplierinvoicedrafts/{supplierInvoiceDraftId}/allocationperiods`.replace(`{${"supplierInvoiceDraftId"}}`, encodeURIComponent(String(requestParameters.supplierInvoiceDraftId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.postedAllocationPlans.map(SupplierInvoiceDraftAllocationPlanToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AllocationPeriodFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:purchase</b></p><p>Available in any of the following variants: <br><b>Pro, Standard</b></p>
     * Update existing allocation periods in an existing supplier invoice draft.
     */
    async supplierInvoiceDraftAllocationPeriodsPut(requestParameters: SupplierInvoiceDraftAllocationPeriodsPutRequest): Promise<Array<AllocationPeriod>> {
        const response = await this.supplierInvoiceDraftAllocationPeriodsPutRaw(requestParameters);
        return await response.value();
    }

}
