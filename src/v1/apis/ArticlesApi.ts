/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Article,
    ArticleFromJSON,
    ArticleToJSON,
} from '../models';

export interface ArticlesGetRequest {
    articleId: string;
    showPricesWithTwoDecimals?: boolean;
}

export interface ArticlesListRequest {
    changedFromDate?: string;
    includeInactive?: boolean;
    articleNumber?: string;
    showPricesWithTwoDecimals?: boolean;
}

export interface ArticlesPostRequest {
    article: Article;
}

export interface ArticlesPutRequest {
    articleId: string;
    article: Article;
}

/**
 * 
 */
export class ArticlesApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Gets an article by id.
     */
    async articlesGetRaw(requestParameters: ArticlesGetRequest): Promise<runtime.ApiResponse<Article>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling articlesGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.showPricesWithTwoDecimals !== undefined) {
            queryParameters['showPricesWithTwoDecimals'] = requestParameters.showPricesWithTwoDecimals;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles/{articleId}`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Gets an article by id.
     */
    async articlesGet(requestParameters: ArticlesGetRequest): Promise<Article> {
        const response = await this.articlesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Gets all active/inactive articles changed from the given date(yyyy-MM-dd) or date(yyyy-MM-dd hh:mm:ss).
     */
    async articlesListRaw(requestParameters: ArticlesListRequest): Promise<runtime.ApiResponse<Array<Article>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.changedFromDate !== undefined) {
            queryParameters['changedFromDate'] = requestParameters.changedFromDate;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.articleNumber !== undefined) {
            queryParameters['articleNumber'] = requestParameters.articleNumber;
        }

        if (requestParameters.showPricesWithTwoDecimals !== undefined) {
            queryParameters['showPricesWithTwoDecimals'] = requestParameters.showPricesWithTwoDecimals;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Gets all active/inactive articles changed from the given date(yyyy-MM-dd) or date(yyyy-MM-dd hh:mm:ss).
     */
    async articlesList(requestParameters: ArticlesListRequest): Promise<Array<Article>> {
        const response = await this.articlesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Create an article
     */
    async articlesPostRaw(requestParameters: ArticlesPostRequest): Promise<runtime.ApiResponse<Article>> {
        if (requestParameters.article === null || requestParameters.article === undefined) {
            throw new runtime.RequiredError('article','Required parameter requestParameters.article was null or undefined when calling articlesPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/articles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleToJSON(requestParameters.article),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Create an article
     */
    async articlesPost(requestParameters: ArticlesPostRequest): Promise<Article> {
        const response = await this.articlesPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Update an article
     */
    async articlesPutRaw(requestParameters: ArticlesPutRequest): Promise<runtime.ApiResponse<Article>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling articlesPut.');
        }

        if (requestParameters.article === null || requestParameters.article === undefined) {
            throw new runtime.RequiredError('article','Required parameter requestParameters.article was null or undefined when calling articlesPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/articles/{articleId}`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleToJSON(requestParameters.article),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Update an article
     */
    async articlesPut(requestParameters: ArticlesPutRequest): Promise<Article> {
        const response = await this.articlesPutRaw(requestParameters);
        return await response.value();
    }

}
