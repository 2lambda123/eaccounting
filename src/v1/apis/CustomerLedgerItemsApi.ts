/* tslint:disable */
/* eslint-disable */
/**
 * Visma eAccounting API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomerLedgerItem,
    CustomerLedgerItemFromJSON,
    CustomerLedgerItemToJSON,
    CustomerLedgerItemWithVoucher,
    CustomerLedgerItemWithVoucherFromJSON,
    CustomerLedgerItemWithVoucherToJSON,
} from '../models';

export interface CustomerLedgerItemsCreateRequest {
    customerLedgerItem: CustomerLedgerItem;
}

export interface CustomerLedgerItemsGetRequest {
    customerLedgerItemId: string;
}

export interface CustomerLedgerItemsListRequest {
    changedFromDate?: string;
}

export interface CustomerLedgerItemsPostRequest {
    customerLedgerItem: CustomerLedgerItemWithVoucher;
    useAutomaticVatCalculation?: boolean;
    useDefaultVatCodes?: boolean;
}

/**
 * 
 */
export class CustomerLedgerItemsApi extends runtime.BaseAPI {

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Create a customer ledger item.
     */
    async customerLedgerItemsCreateRaw(requestParameters: CustomerLedgerItemsCreateRequest): Promise<runtime.ApiResponse<CustomerLedgerItem>> {
        if (requestParameters.customerLedgerItem === null || requestParameters.customerLedgerItem === undefined) {
            throw new runtime.RequiredError('customerLedgerItem','Required parameter requestParameters.customerLedgerItem was null or undefined when calling customerLedgerItemsCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customerledgeritems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerLedgerItemToJSON(requestParameters.customerLedgerItem),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerLedgerItemFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Create a customer ledger item.
     */
    async customerLedgerItemsCreate(requestParameters: CustomerLedgerItemsCreateRequest): Promise<CustomerLedgerItem> {
        const response = await this.customerLedgerItemsCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Get a customer ledger item by id.
     */
    async customerLedgerItemsGetRaw(requestParameters: CustomerLedgerItemsGetRequest): Promise<runtime.ApiResponse<CustomerLedgerItem>> {
        if (requestParameters.customerLedgerItemId === null || requestParameters.customerLedgerItemId === undefined) {
            throw new runtime.RequiredError('customerLedgerItemId','Required parameter requestParameters.customerLedgerItemId was null or undefined when calling customerLedgerItemsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customerledgeritems/{customerLedgerItemId}`.replace(`{${"customerLedgerItemId"}}`, encodeURIComponent(String(requestParameters.customerLedgerItemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerLedgerItemFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Get a customer ledger item by id.
     */
    async customerLedgerItemsGet(requestParameters: CustomerLedgerItemsGetRequest): Promise<CustomerLedgerItem> {
        const response = await this.customerLedgerItemsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Get a list of customer ledger items.
     */
    async customerLedgerItemsListRaw(requestParameters: CustomerLedgerItemsListRequest): Promise<runtime.ApiResponse<Array<CustomerLedgerItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.changedFromDate !== undefined) {
            queryParameters['changedFromDate'] = requestParameters.changedFromDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customerledgeritems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerLedgerItemFromJSON));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales, ea:sales_readonly</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Get a list of customer ledger items.
     */
    async customerLedgerItemsList(requestParameters: CustomerLedgerItemsListRequest): Promise<Array<CustomerLedgerItem>> {
        const response = await this.customerLedgerItemsListRaw(requestParameters);
        return await response.value();
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Create a customer ledger item and a voucher included.
     */
    async customerLedgerItemsPostRaw(requestParameters: CustomerLedgerItemsPostRequest): Promise<runtime.ApiResponse<CustomerLedgerItemWithVoucher>> {
        if (requestParameters.customerLedgerItem === null || requestParameters.customerLedgerItem === undefined) {
            throw new runtime.RequiredError('customerLedgerItem','Required parameter requestParameters.customerLedgerItem was null or undefined when calling customerLedgerItemsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.useAutomaticVatCalculation !== undefined) {
            queryParameters['useAutomaticVatCalculation'] = requestParameters.useAutomaticVatCalculation;
        }

        if (requestParameters.useDefaultVatCodes !== undefined) {
            queryParameters['useDefaultVatCodes'] = requestParameters.useDefaultVatCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customerledgeritems/customerledgeritemswithvoucher`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerLedgerItemWithVoucherToJSON(requestParameters.customerLedgerItem),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerLedgerItemWithVoucherFromJSON(jsonValue));
    }

    /**
     * <p>Requires any of the following scopes: <br><b>ea:sales</b></p><p>Available in any of the following variants: <br><b>Pro, Standard, Invoicing, Solo</b></p>
     * Create a customer ledger item and a voucher included.
     */
    async customerLedgerItemsPost(requestParameters: CustomerLedgerItemsPostRequest): Promise<CustomerLedgerItemWithVoucher> {
        const response = await this.customerLedgerItemsPostRaw(requestParameters);
        return await response.value();
    }

}
